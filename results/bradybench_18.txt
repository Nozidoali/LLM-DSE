
================================================================================
For the given C code
 ```c++ 
#pragma ACCEL kernel

void top(float input[32][128],float gamma[128],float beta[128],float output[32][128])
{
  float diff;
  float mean[128] = {(0.0f)};
  float variance[128] = {(0.0f)};
  
#pragma ACCEL PIPELINE auto{__PIPE__L0}
  
#pragma ACCEL TILE FACTOR=auto{__TILE__L0}
  
#pragma ACCEL PARALLEL FACTOR=auto{__PARA__L0}
  for (int f = 0; f < 128; f++) {
    for (int b = 0; b < 32; b++) {
      mean[f] += input[b][f];
    }
    mean[f] /= ((float )32);
  }
  
#pragma ACCEL PIPELINE auto{__PIPE__L1}
  
#pragma ACCEL TILE FACTOR=auto{__TILE__L1}
  
#pragma ACCEL PARALLEL FACTOR=auto{__PARA__L1}
  for (int f = 0; f < 128; f++) {
    for (int b = 0; b < 32; b++) {
      diff = input[b][f] - mean[f];
      variance[f] += diff * diff;
    }
    variance[f] /= ((float )32);
  }
  
#pragma ACCEL PIPELINE auto{__PIPE__L2}
  
#pragma ACCEL TILE FACTOR=auto{__TILE__L2}
  for (int b = 0; b < 32; b++) {
    
#pragma ACCEL PARALLEL FACTOR=auto{__PARA__L5}
    for (int f = 0; f < 128; f++) {
      output[b][f] = gamma[f] * (input[b][f] - mean[f]) / ((float )((((double )variance[f]) + 1e-5) * (((double )variance[f]) + 1e-5))) + beta[f];
    }
  }
}

``` with some pragma placeholders for high level synthesis (HLS), your task is to choose one of the following updates that optimize clock cycles the most.
(0): change __PARA__L0 from 128 to 32
(1): change __PARA__L1 from 32 to 16
(2): change __PARA__L5 from 32 to 8
(3): change __PIPE__L0 from  to flatten
(4): change __PIPE__L1 from  to flatten
(5): change __PIPE__L2 from  to flatten
(6): change __TILE__L0 from 1 to 8
(7): change __TILE__L1 from 1 to 4
(8): change __TILE__L2 from 1 to 4
Note that when:
the value of __PARA__L0 is 128
the value of __PARA__L1 is 32
the value of __PARA__L5 is 32
the value of __PIPE__L0 is 
the value of __PIPE__L1 is 
the value of __PIPE__L2 is 
the value of __TILE__L0 is 1
the value of __TILE__L1 is 1
the value of __TILE__L2 is 1
The kernel's results after HLS synthesis are:
 cycles = 54296 (0.217ms)
lut utilization = 86743 (7%)
FF utilization = 82322 (3%)
BRAM utilization = 122 (2%)
DSP utilization = 517 (7%)
URAM utilization = 0 (~0%)
To better understand the problem, here are some knowledge about the HLS pragmas you are encountering:
 For the __PARA__ pragma:
  (1) Parallel pragram will parallelize the first for loop in the c code under __PARA__.
  (2) Increasing the parallel factor will increase the resource utilization but improve the performance and decease the number of cycles (which is one of your target).
  (3) Increasing parallel factor roughly linearly increase the resource utilization within the loop it applies on, so you may scale the factor with respect to the ratio between current utilization with the 80% budget.
  (4) Increasing the parallel factor will also increase the compilation time, you must decrease the parallel factor if you received the compilation timeout.
 For the __TILE__ pragma:
  (1) Tile pragma will tile the first for loop in the c code under __TILE__.
  (2) Increasing the tile factor will reduce the memory transfer cycles because it will restrict the memory transfer.
 For the __PIPE__ pragma:
  (1) Pipeline pragma will affect MULTIPLE loops under __PIPELINE__.
  (2) The flatten option will unroll all the for loops (which means putting __PARA__ equals to the loop bound in the for loop) under this pragma.
  (3) Turning off the pipeline will not apply any pipelining, which is useful when you get compilation timeout in the report.
  (4) Choosing the empty string means coars-grained pipelining, which is useful when you believe the loop inside it has fewer loop-carried dependencies.
To make better decision, here are some information about the preference:
  (1) You should prioritize optimizing the __PARA__ pragma first, as it affect the performance the most.
  (2) If you think all the parallel factors are already optimal, you consider pipeline as the secondary choice. When doing so, you must remember that the pipeline pragma will affect MULTIPLE loops. The flatten option will unroll all the for loops under this pragma. Turning off the pipeline will not apply any pipelining, which is useful when you get compilation timeout in the report.
  (3) If you think all the parallel factors are already optimal, and the pipeline pragma is already optimal, you can consider the tile pragma. The tile pragma will tile the first for loop in the c code under __TILE__.
  (4) By default, setting __TILE__ to 1 is perferable.
  (5) By default, setting __PIPE__ to 1 is perferable.
Make the update to the current design and output only the new pragma design for the keys: __PARA__L0,__PARA__L1,__PARA__L5,__PIPE__L0,__PIPE__L1,__PIPE__L2,__TILE__L0,__TILE__L1,__TILE__L2as a JSON string. i.e., can be represented as {"pragma1": value1, "pragma2": value2, ...}
--------------------------------------------------------------------------------
```json
{"__PARA__L0": 128, "__PARA__L1": 32, "__PARA__L5": 32, "__PIPE__L0": "", "__PIPE__L1": "", "__PIPE__L2": "flatten", "__TILE__L0": 1, "__TILE__L1": 1, "__TILE__L2": 1}
```