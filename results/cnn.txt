
================================================================================
For the given C code
 ```c++ 
#define max(X,Y) ((X)>(Y)?(X):(Y))

#pragma ACCEL kernel

void CnnKernel(const float input[256][228][228],const float weight[256][256][5][5],const float bias[256],float output[256][112][112])
{
// Allocate memory on heap to avoid stack overflow.
  static float C[256][224][224];
  
#pragma ACCEL PIPELINE auto{__PIPE__L0}
  
#pragma ACCEL TILE FACTOR=auto{__TILE__L0}
  
#pragma ACCEL PARALLEL FACTOR=auto{__PARA__L0}
  for (int i = 0; i < 256; ++i) {
    
#pragma ACCEL PIPELINE auto{__PIPE__L4}
    
#pragma ACCEL TILE FACTOR=auto{__TILE__L4}
    
#pragma ACCEL PARALLEL FACTOR=auto{__PARA__L4}
    for (int h = 0; h < 224; ++h) {
      
#pragma ACCEL PARALLEL FACTOR=auto{__PARA__L8}
      for (int w = 0; w < 224; ++w) {
        C[i][h][w] = bias[i];
      }
    }
  }
// Convolution
  
#pragma ACCEL PIPELINE auto{__PIPE__L1}
  
#pragma ACCEL TILE FACTOR=auto{__TILE__L1}
  
#pragma ACCEL PARALLEL FACTOR=auto{__PARA__L1}
  for (int i = 0; i < 256; ++i) {
    
#pragma ACCEL PIPELINE auto{__PIPE__L5}
    
#pragma ACCEL TILE FACTOR=auto{__TILE__L5}
    
#pragma ACCEL PARALLEL FACTOR=auto{__PARA__L5}
    for (int j = 0; j < 256; ++j) {
      
#pragma ACCEL PIPELINE auto{__PIPE__L9}
      
#pragma ACCEL TILE FACTOR=auto{__TILE__L9}
      
#pragma ACCEL PARALLEL FACTOR=auto{__PARA__L9}
      for (int h = 0; h < 224; ++h) {
        
#pragma ACCEL PIPELINE auto{__PIPE__L12}
        
#pragma ACCEL TILE FACTOR=auto{__TILE__L12}
        
#pragma ACCEL PARALLEL FACTOR=auto{__PARA__L12}
        for (int w = 0; w < 224; ++w) {
          
#pragma ACCEL PIPELINE auto{__PIPE__L13}
          
#pragma ACCEL TILE FACTOR=auto{__TILE__L13}
          for (int p = 0; p < 5; ++p) {
            for (int q = 0; q < 5; ++q) {
              C[i][h][w] += weight[i][j][p][q] * input[j][h + p][w + q];
            }
          }
        }
      }
    }
  }
// ReLU
  
#pragma ACCEL PIPELINE auto{__PIPE__L2}
  
#pragma ACCEL TILE FACTOR=auto{__TILE__L2}
  
#pragma ACCEL PARALLEL FACTOR=auto{__PARA__L2}
  for (int i = 0; i < 256; ++i) {
    
#pragma ACCEL PIPELINE auto{__PIPE__L6}
    
#pragma ACCEL TILE FACTOR=auto{__TILE__L6}
    
#pragma ACCEL PARALLEL FACTOR=auto{__PARA__L6}
    for (int h = 0; h < 224; ++h) {
      
#pragma ACCEL PARALLEL FACTOR=auto{__PARA__L10}
      for (int w = 0; w < 224; ++w) {
        C[i][h][w] = ((float )(max(0,(double )C[i][h][w])));
      }
    }
  }
// Max pooling
  
#pragma ACCEL PIPELINE auto{__PIPE__L3}
  
#pragma ACCEL TILE FACTOR=auto{__TILE__L3}
  
#pragma ACCEL PARALLEL FACTOR=auto{__PARA__L3}
  for (int i = 0; i < 256; ++i) {
    
#pragma ACCEL PIPELINE auto{__PIPE__L7}
    
#pragma ACCEL TILE FACTOR=auto{__TILE__L7}
    
#pragma ACCEL PARALLEL FACTOR=auto{__PARA__L7}
    for (int h = 0; h < 112; ++h) {
      
#pragma ACCEL PARALLEL FACTOR=auto{__PARA__L11}
      for (int w = 0; w < 112; ++w) {
        output[i][h][w] = ((float )(max((max((double )C[i][h * 2][w * 2],(double )C[i][h * 2 + 1][w * 2])),(max((double )C[i][h * 2][w * 2 + 1],(double )C[i][h * 2 + 1][w * 2 + 1])))));
      }
    }
  }
}

``` with some pragma placeholders for high level synthesis (HLS), your task is to choose one of the following updates that optimize clock cycles the most.
(0): change __PARA__L0 from 1 to 16
(1): change __PARA__L1 from 256 to 32
(2): change __PARA__L10 from 1 to 28
(3): change __PARA__L11 from 14 to 28
(4): change __PARA__L12 from 28 to 32
(5): change __PARA__L2 from 1 to 32
(6): change __PARA__L3 from 1 to 32
(7): change __PARA__L4 from 1 to 28
(8): change __PARA__L5 from 1 to 16
(9): change __PARA__L6 from 1 to 32
(10): change __PARA__L7 from 1 to 8
(11): change __PARA__L8 from 1 to 8
(12): change __PARA__L9 from 1 to 32
(13): change __PIPE__L0 from off to flatten
(14): change __PIPE__L1 from off to flatten
(15): change __PIPE__L12 from off to flatten
(16): change __PIPE__L13 from off to flatten
(17): change __PIPE__L2 from off to flatten
(18): change __PIPE__L3 from off to 
(19): change __PIPE__L4 from off to flatten
(20): change __PIPE__L5 from off to flatten
(21): change __PIPE__L6 from off to flatten
(22): change __PIPE__L7 from off to flatten
(23): change __PIPE__L9 from off to flatten
(24): change __TILE__L0 from 1 to 4
(25): change __TILE__L1 from 1 to 4
(26): change __TILE__L12 from 1 to 4
(27): change __TILE__L13 from 1 to 5
(28): change __TILE__L2 from 1 to 4
(29): change __TILE__L3 from 1 to 8
(30): change __TILE__L4 from 1 to 224
(31): change __TILE__L5 from 1 to 4
(32): change __TILE__L6 from 1 to 4
(33): change __TILE__L7 from 1 to 8
(34): change __TILE__L9 from 1 to 8
Note that when:
the value of __PARA__L0 is 1
the value of __PARA__L1 is 256
the value of __PARA__L10 is 1
the value of __PARA__L11 is 14
the value of __PARA__L12 is 28
the value of __PARA__L2 is 1
the value of __PARA__L3 is 1
the value of __PARA__L4 is 1
the value of __PARA__L5 is 1
the value of __PARA__L6 is 1
the value of __PARA__L7 is 1
the value of __PARA__L8 is 1
the value of __PARA__L9 is 1
the value of __PIPE__L0 is off
the value of __PIPE__L1 is off
the value of __PIPE__L12 is off
the value of __PIPE__L13 is off
the value of __PIPE__L2 is off
the value of __PIPE__L3 is off
the value of __PIPE__L4 is off
the value of __PIPE__L5 is off
the value of __PIPE__L6 is off
the value of __PIPE__L7 is off
the value of __PIPE__L9 is off
the value of __TILE__L0 is 1
the value of __TILE__L1 is 1
the value of __TILE__L12 is 1
the value of __TILE__L13 is 1
the value of __TILE__L2 is 1
the value of __TILE__L3 is 1
the value of __TILE__L4 is 1
the value of __TILE__L5 is 1
the value of __TILE__L6 is 1
the value of __TILE__L7 is 1
the value of __TILE__L9 is 1
The kernel's results after HLS synthesis are:
 cycles = 770356285473 (3081425.142ms)
lut utilization = 29499 (2%)
FF utilization = 28636 (1%)
BRAM utilization = 1272 (29%)
DSP utilization = 23 (~0%)
URAM utilization = 0 (~0%)
To better understand the problem, here are some knowledge about the HLS pragmas you are encountering:
 For the __PARA__ pragma:
  (1) Parallel pragram will parallelize the first for loop in the c code under __PARA__.
  (2) Increasing the parallel factor will increase the resource utilization but improve the performance and decease the number of cycles (which is one of your target).
  (3) Increasing parallel factor roughly linearly increase the resource utilization within the loop it applies on, so you may scale the factor with respect to the ratio between current utilization with the 80% budget.
  (4) Increasing the parallel factor will also increase the compilation time, you must decrease the parallel factor if you received the compilation timeout.
 For the __TILE__ pragma:
  (1) Tile pragma will tile the first for loop in the c code under __TILE__.
  (2) Increasing the tile factor will reduce the memory transfer cycles because it will restrict the memory transfer.
 For the __PIPE__ pragma:
  (1) Pipeline pragma will affect MULTIPLE loops under __PIPELINE__.
  (2) The flatten option will unroll all the for loops (which means putting __PARA__ equals to the loop bound in the for loop) under this pragma.
  (3) Turning off the pipeline will not apply any pipelining, which is useful when you get compilation timeout in the report.
  (4) Choosing the empty string means coars-grained pipelining, which is useful when you believe the loop inside it has fewer loop-carried dependencies.
To make better decision, here are some information about the preference:
  (1) You should prioritize optimizing the __PARA__ pragma first, as it affect the performance the most.
  (2) If you think all the parallel factors are already optimal, you consider pipeline as the secondary choice. When doing so, you must remember that the pipeline pragma will affect MULTIPLE loops. The flatten option will unroll all the for loops under this pragma. Turning off the pipeline will not apply any pipelining, which is useful when you get compilation timeout in the report.
  (3) If you think all the parallel factors are already optimal, and the pipeline pragma is already optimal, you can consider the tile pragma. The tile pragma will tile the first for loop in the c code under __TILE__.
  (4) By default, setting __TILE__ to 1 is perferable.
  (5) By default, setting __PIPE__ to 1 is perferable.
Make the update to the current design and output only the new pragma design for the keys: __PARA__L0,__PARA__L1,__PARA__L10,__PARA__L11,__PARA__L12,__PARA__L2,__PARA__L3,__PARA__L4,__PARA__L5,__PARA__L6,__PARA__L7,__PARA__L8,__PARA__L9,__PIPE__L0,__PIPE__L1,__PIPE__L12,__PIPE__L13,__PIPE__L2,__PIPE__L3,__PIPE__L4,__PIPE__L5,__PIPE__L6,__PIPE__L7,__PIPE__L9,__TILE__L0,__TILE__L1,__TILE__L12,__TILE__L13,__TILE__L2,__TILE__L3,__TILE__L4,__TILE__L5,__TILE__L6,__TILE__L7,__TILE__L9as a JSON string. i.e., can be represented as {"pragma1": value1, "pragma2": value2, ...}
--------------------------------------------------------------------------------
```json
{
    "__PARA__L0": 1,
    "__PARA__L1": 32,
    "__PARA__L10": 1,
    "__PARA__L11": 14,
    "__PARA__L12": 28,
    "__PARA__L2": 1,
    "__PARA__L3": 1,
    "__PARA__L4": 1,
    "__PARA__L5": 1,
    "__PARA__L6": 1,
    "__PARA__L7": 1,
    "__PARA__L8": 1,
    "__PARA__L9": 1,
    "__PIPE__L0": "off",
    "__PIPE__L1": "off",
    "__PIPE__L12": "off",
    "__PIPE__L13": "off",
    "__PIPE__L2": "off",
    "__PIPE__L3": "off",
    "__PIPE__L4": "off",
    "__PIPE__L5": "off",
    "__PIPE__L6": "off",
    "__PIPE__L7": "off",
    "__PIPE__L9": "off",
    "__TILE__L0": 1,
    "__TILE__L1": 1,
    "__TILE__L12": 1,
    "__TILE__L13": 1,
    "__TILE__L2": 1,
    "__TILE__L3": 1,
    "__TILE__L4": 1,
    "__TILE__L5": 1,
    "__TILE__L6": 1,
    "__TILE__L7": 1,
    "__TILE__L9": 1
}
```